name: Deploy .NET Lambda with AWS SAM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-analyze:
    name: Test & SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore Dependencies
        run: dotnet restore

      - name: Begin SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin `
            /k:"${{ vars.SONAR_PROJECT_KEY }}" `
            /n:"${{ vars.SONAR_PROJECT_NAME }}" `
            /o:"${{ vars.SONAR_ORGANIZATION }}" `
            /d:sonar.scanner.scanAll=false `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" `
            /d:sonar.cs.opencover.reportsPaths="coverage/*/coverage.opencover.xml"

      - name: Build Project
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests with Coverage
        run: |
          dotnet test --no-build --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        continue-on-error: true

      - name: End SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          try {
            ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          } catch {
            Write-Host "::warning::SonarQube analysis failed: $($_.Exception.Message)"
            exit 0
          }
        continue-on-error: true

      - name: Check if SonarQube analysis completed
        id: check-analysis
        run: |
          if [ -f ".scannerwork/report-task.txt" ]; then
            echo "analysis_completed=true" >> $GITHUB_OUTPUT
          else
            echo "analysis_completed=false" >> $GITHUB_OUTPUT
            echo "::warning::SonarQube analysis did not complete successfully"
          fi

      - name: SonarQube Quality Gate check
        if: steps.check-analysis.outputs.analysis_completed == 'true'
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-deploy:
    name: Build and Deploy SAM Application
    needs: test-and-analyze
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build SAM Application
        run: sam build --use-container --mount-with WRITE

      - name: Deploy SAM Application
        run: |
          sam deploy \
            --stack-name ${{ vars.SAM_STACK_NAME }} \
            --s3-prefix ${{ vars.SAM_S3_PREFIX }} \
            --region ${{ vars.AWS_REGION }} \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --resolve-s3 \
            --parameter-overrides \
              VpcSubnets='${{ vars.VPC_SUBNETS }}' \
              VpcSecurityGroups='${{ vars.VPC_SECURITY_GROUPS }}' \
              SentryDSN='${{ secrets.SENTRY_DSN }}' \
              ProgressQueueUrl='${{ vars.PROGRESS_QUEUE_URL }}' \
              DatabaseHost='${{ vars.DATABASE_HOST }}' \
              DatabasePort='${{ vars.DATABASE_PORT }}' \
              DatabaseUser='${{ vars.DATABASE_USER }}' \
              DatabasePassword='${{ secrets.DATABASE_PASSWORD }}' \
              DatabaseName='${{ vars.DATABASE_NAME }}' \
              CollectionName='${{ vars.COLLECTION_NAME }}'